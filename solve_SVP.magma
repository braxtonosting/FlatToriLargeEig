/* 
This scipt is used to solve the SVP. 
Usage: In magma, run: 
load "solve_SVP.magma";
*/

predMults := [1,3,6,11,19,31,53,91];
kappas := [2*i: i in [2..250000]]; 
// kappas := [1000000*i: i in [1..10]]; 
// kappas := [10000000*i: i in [1..10]]; 


for kappa in kappas do 
    if kappa mod 100 eq 0 then 
        kappa;
    end if;

    a := 2*kappa^2;
    b := kappa^2;
    c := -4;
    G8 := MatrixRing(IntegerRing(), 8) ! [a, b, b, 0, b, 0, b, c,
                           b, a, 0, 0, 0, 0, b, c, 
                           b, 0, a, 0, b, 0, 0, 0,
                           0, 0, 0, a,-b, b,-b, 0,
                           b, 0, b,-b, a, 0, b, 0,
                           0, 0, 0, b, 0, a,-b, 0,
                           b, b, 0,-b, b,-b, a, c,
                           c, c, 0, 0, 0, 0, c, 8];  

    for dim in [2..8] do
        //dim;
        G := MatrixRing(IntegerRing(), dim) ! [0: i in [1..dim^2]];

        for i in [1..dim] do
        	for j in [1..dim] do
        		G[i][j] := G8[8-dim+i][8-dim+j];
        	end for;
        end for;

        L := LatticeWithGram(G);
        S := ShortVectors(L, 8*(kappa/2)^2 + 1 );
        
        // first check there are the correct number of shorter vectors
        V1 := [v[1] : v in S | v[2] lt 8*(kappa/2)^2];
        if #V1 ne (kappa/2 - 1) then
            "wrong number of shorter vectors";
            #V1;
            V1;
            break kappa;
        end if;

        // then check there are the correct number of good vectors
        V2 := [v[1] : v in S | v[2] eq 8*(kappa/2)^2];
        if #V2 ne predMults[dim] then
            "wrong number of eigs";
            #V2;
            V2;
            break kappa;
        end if;
    end for;
end for;
